N = 1615765684321463054078226051959887884233678317734892901740763321135213636796075462401950274602405095138589898087428337758445013281488966866073355710771864671726991918706558071231266976427184673800225254531695928541272546385146495736420261815693810544589811104967829354461491178200126099661909654163542661541699404839644035177445092988952614918424317082380174383819025585076206641993479326576180793544321194357018916215113009742654408597083724508169216182008449693917227497813165444372201517541788989925461711067825681947947471001390843774746442699739386923285801022685451221261010798837646928092277556198145662924691803032880040492762442561497760689933601781401617086600593482127465655390841361154025890679757514060456103104199255917164678161972735858939464790960448345988941481499050248673128656508055285037090026439683847266536283160142071643015434813473463469733112182328678706702116054036618277506997666534567846763938692335069955755244438415377933440029498378955355877502743215305768814857864433151287
c = 1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808146919581675891411119628108546342758721287307471723093546788074479139848242227243523617899178070097350912870635303707113283010669418774091018728233471491573736725568575532635111164176010070788796616348740261987121152288917179932230769893513971774137615028741237163693178359120276497700812698199245070488892892209716639870702721110338285426338729911942926177029934906215716407021792856449586278849142522957603215285531263079546937443583905937777298337318454706096366106704204777777913076793265584075700215822263709126228246232640662350759018119501368721990988895700497330256765579153834824063344973587990533626156498797388821484630786016515988383280196865544019939739447062641481267899176504155482
e = 3

# c = (M^e)%N
# thus M^e = N*k + c
# thus for e = 3; 3rdRoot of (N*k + c) = M; [ k in [0, some-number]]

import gmpy2
# https://gmpy2.readthedocs.io/en/latest/

'''
gmpy2.invert(x, m, /)→ mpz
Return y such that x*y == 1 modulo m. Raises ZeroDivisionError if no inverse exists.

gmpy2.iroot(x, n, /)→ tuple[mpz, bool]
Return the integer n-th root of x and boolean value that is True iff the root is exact. x >= 0. n > 0.

gmpy2.iroot_rem(x, n, /)→ tuple[mpz, mpz]
Return a 2-element tuple (y,r), such that y is the integer n-th root of x and x=y**n + r. x >= 0. n >
'''

from gmpy2 import *

realM = 0;

for k in range(0, 10000):
    Me = N*k + c;
    M = gmpy2.iroot(Me, 3);
    if(M[1]):
        # print(k, M[1]);
        # print("M : ", M[0]);
        realM = M[0];
        break;

# found M :  1787330808968142828287809319332701517353332911736848279839502759158602467824780424488141955644417387373185756944952906538004355347478978500948630620749868180414755933760446136287315896825929319145984883756667607031853695069891380871892213007874933611243319812691520078269033745367443951846845107464675742664639073699907476681022428557437


'''
Inside the placeholders you can add a formatting type to format the result:

:<      Left aligns the result (within the available space)
:>      Right aligns the result (within the available space)
:^      Center aligns the result (within the available space)
:=      Places the sign to the left most position
:+      Use a plus sign to indicate if the result is positive or negative
:-      Use a minus sign for negative values only
:       Use a space to insert an extra space before positive numbers (and a minus sign before negative numbers)
:,      Use a comma as a thousand separator
:_      Use a underscore as a thousand separator
:b      Binary format
:c      Converts the value into the corresponding unicode character
:d      Decimal format
:e      Scientific format, with a lower case e
:E      Scientific format, with an upper case E
:f      Fix point number format
:F      Fix point number format, in uppercase format (show inf and nan as INF and NAN)
:g      General format
:G      General format (using a upper case E for scientific notations)
:o      Octal format
:x      Hex format, lower case
:X      Hex format, upper case
:n      Number format
:%      Percentage format
'''
# :x      Hex format, lower case
st = ("{:x}".format(realM));
print("st: ", st);

# pip install pycopy-binascii
#already installed
import binascii

'''
binascii.hexlify(data[, sep[, bytes_per_sep=1]])
Return the hexadecimal representation of the binary data. Every byte of data is converted into the corresponding 2-digit hex representation. The returned bytes object is therefore twice as long as the length of data.
'''
convert = binascii.unhexlify(st)

print(convert)

# picoCTF{e_sh0u1d_b3_lArg3r_60ef2420}
