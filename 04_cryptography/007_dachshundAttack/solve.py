# Welcome to my RSA challenge!

e = 76619889114148078706565515470117036032919305676515277413822845414374915471831217848184503490094165703158214910834485925593805392681691824937110647434813342742200749310879795411932700924744737805154918827483756741237721295614883882214813533807512645710019092481622939505173917331169765575474181010034361860491
n = 113101026562854217078530477156650254222272666800128436308603315820244964730600862104371036435376628469677200674757122108053184764638581554542616626951323083341123532476148721583621433391308516130080749520805322389382955370775393101316428532224069367068556611017436801054930804756979854090252799920580551096423
c = 38958224733481833406139478498396168275233190288148222843061154080556931818562671741080724735386483038060621701230933265915579316011607196253808572786368839006206589754569543470805799677567970530135284228086666630415461595179315143680326871653574177095770386795173288537022497508762707051750096698345682110320

'''
Steps in RSA algorithm:
- need to generate public and private keys before running the functions
     to generate your cipheretext and plaintext

- use of certain vars and parameters : 
    > choose two large prime numbers (p, q)
    > calculate : n = p*q and z = phi(n) = (p-1)(q-1)
    > choose a number: e : 1 < e < z
    > now consider a number d: such that
        #  (e * d)%z = 1
        => d = (e^(-1))%z

    > private key pair (n, d)
    > public key pair (n, e)

- Use of encryption/decryption funciton 
    > suppose your plaintext : m 
    > ciphertext : c = (M^e)%n
    
    > suppose ciphertext : c
    > plaintext  : m = (c^d)%n

'''

import binascii
import owiener
# from owiener import *
# curl -O https://raw.githubusercontent.com/orisano/owiener/master/owiener.py
d = owiener.attack(e, n)
print(d);

m = pow(c, d, n)

st = "{:x}".format(m);

convert = binascii.unhexlify(st);
print(convert)